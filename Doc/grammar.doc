chunk -> packageblock typedecblock

;包区块
packageblock -> packagedec {importpackagedec}

;包声明
packagedec -> package packagename

;包引用
importpackagedec -> import id '=' packagename | import packagename

;包名字
packagename -> id {'.' id}

;类型定义区块
typedecblock -> classblock

;类定义区块
classblock -> [extern] class id [extends id] {classmember}

;【类成员】
classmember -> classfuncs | classfields | classstaticctor | classctor

;类字段
classfields -> [static | global] vardecexp

;类函数
classfuncs -> [static | extern global | global] funcdec

;类静态构造
classstaticctor -> static id '(' ')' block end

;类构造
classctor -> id funcbody

;【变量】
var -> id | prefixexp '[' exp ']' | prefixexp '.' id | this | this '[' exp ']' | this '.' id | super

;变量列表
varlist -> var {',' var}

;变量定义表达式
vardecexp -> vardec ['=' explist]

;函数定义
funcdec -> funcheader funcbody

;变量列表
vardec -> type id {',' id}

;【类型】
type -> boolean | number | string | table | any | id | function '<' resulttype ':' [typelist] '>' | table '<' type '>' | table '<' type ',' type '>'

;类型列表
typelist -> type {',' type}

;表达式列表
explist-> exp {',' exp}

;函数签名
funcheader -> resulttype id

;返回值类型
resulttype -> void | typelist

;函数体
funcbody -> '(' [parlist] ')' block end

;参数列表
parlist -> [type id] {',' type id} [',' type '...' id]

;【值表达式】
exp -> nil | booleanvalue | numbervalue | stringvalue | tableconstructor | prefixexp | funcbody | typeconversionexp |
         exp binop exp | unop exp 

;lua表构造
tableconstructor -> '{' id '}'

;类型转换
typeconversionexp -> prefixexp as type

;【需要先取值/运算的表达式】
prefixexp -> var | funccall | new id '(' [varlist] ')' | '(' exp ')'

;函数调用
funccall -> prefixexp '(' [explist] ')'

;代码块
block -> {statement} [laststatement]

;【语句】
statement ->  
        vardecexp | 
        funccall | 
        var '=' explist | 
        if exp then block {elseif exp then block} [else block] end | 
        while exp do block end | 
        repeat block until exp | 
        for id '=' exp ',' exp [',' exp] do block end | 
        for [type] id ',' [type] id in exp do block end |
        do block end

;结束语句
laststatement -> return explist | break

;双目运算符
binop -> '+' | '-' | '*' | '/' | '%' | '..' | 
         '<' | '<=' | '>' | '>=' | '==' | '~=' | 
         and | or

;单目运算符
unop -> '-' | not | '#'

;symboltoken
; = ASSIGN
; . DOT
; ( LP
; ) RP
; [ LB
; ] RB
; { LC
; } RC
; < LA
; > RA
; , COMMA
; : COLON
; + ARI
; - ARI
; * ARI
; / ARI
; % ARI
; .. JOINT
; <= REL
; >= REL
; == REL
; ~= REL
; # COUNT
; ... REP