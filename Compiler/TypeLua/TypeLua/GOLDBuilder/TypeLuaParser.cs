//Generated by the GOLD Parser Builder

using System.IO;

using TypeLua.Production;

namespace TypeLua.GOLDBuilder
{
    using Project;
    using Project.Exception;

    using TypeLua.Project.Types;

    public class TypeLuaParser
    {
        private GOLD.Parser parser = new GOLD.Parser(); 

        public enum SymbolIndex
        {
            @Eof = 0,                                  // (EOF)
            @Error = 1,                                // (Error)
            @Comment = 2,                              // Comment
            @Newline = 3,                              // NewLine
            @Whitespace = 4,                           // Whitespace
            @Minusminus = 5,                           // '--'
            @Minusminuslbracketlbracket = 6,           // '--[['
            @Rbracketrbracket = 7,                     // ']]'
            @Lbrace = 8,                               // '{'
            @Rbrace = 9,                               // '}'
            @Minus = 10,                               // '-'
            @Num = 11,                                 // '#'
            @Percent = 12,                             // '%'
            @Lparen = 13,                              // '('
            @Rparen = 14,                              // ')'
            @Times = 15,                               // '*'
            @Comma = 16,                               // ','
            @Dotdot = 17,                              // '..'
            @Dotdotdot = 18,                           // '...'
            @Div = 19,                                 // '/'
            @Colon = 20,                               // ':'
            @Semi = 21,                                // ';'
            @Lbracket = 22,                            // '['
            @Rbracket = 23,                            // ']'
            @Tildeeq = 24,                             // '~='
            @Plus = 25,                                // '+'
            @Lt = 26,                                  // '<'
            @Lteq = 27,                                // '<='
            @Eq = 28,                                  // '='
            @Eqeq = 29,                                // '=='@Gt = 30,                                  // '>'
            @Gteq = 31,                                // '>='
            @And = 32,                                 // and
            @Any = 33,                                 // any
            @As = 34,                                  // as
            @Boolean = 35,                             // boolean
            @Booleanvalue = 36,                        // BooleanValue
            @Break = 37,                               // break
            @Class = 38,                               // class
            @Do = 39,                                  // do
            @Else = 40,                                // else
            @Elseif = 41,                              // elseif
            @End = 42,                                 // end
            @Extends = 43,                             // extends
            @Extern = 44,                              // extern
            @For = 45,                                 // for
            @Function = 46,                            // function
            @Global = 47,                              // global
            @Hashtable = 48,                           // HashTable
            @Identifier = 49,                          // Identifier
            @If = 50,                                  // if
            @Import = 51,                              // import
            @In = 52,                                  // in
            @Listtable = 53,                           // ListTable
            @Luatable = 54,                            // LuaTable
            @Member = 55,                              // Member
            @New = 56,                                 // new
            @Nil = 57,                                 // nil
            @Not = 58,                                 // not
            @Number = 59,                              // number
            @Numbervalue = 60,                         // NumberValue
            @Or = 61,                                  // or
            @Package = 62,                             // package
            @Private = 63,                             // private
            @Protected = 64,                           // protected
            @Public = 65,                              // public
            @Repeat = 66,                              // repeat
            @Return = 67,                              // return
            @Static = 68,                              // static
            @String = 69,                              // string
            @Stringvalue = 70,                         // StringValue
            @Super = 71,                               // super
            @Table = 72,                               // table
            @Then = 73,                                // then
            @This = 74,                                // this
            @Until = 75,                               // until
            @Void = 76,                                // void
            @While = 77,                               // while
            @Addexp = 78,                              // <add exp>
            @Andexp = 79,                              // <and exp>
            @Argumentlist = 80,                        // <argument list>
            @Block = 81,                               // <block>
            @Chunk = 82,                               // <chunk>
            @Classbaseopt = 83,                        // <class base opt>
            @Classblock = 84,                          // <class block>
            @Classctor = 85,                           // <class ctor>
            @Classexternfunction = 86,                 // <class extern function>
            @Classfield = 87,                          // <class field>
            @Classfieldassignment = 88,                // <class field assignment>
            @Classfunction = 89,                       // <class function>
            @Classmember = 90,                         // <class member>
            @Classmemberlist = 91,                     // <class member list>
            @Compareexp = 92,                          // <compare exp>
            @Elseifstatement = 93,                     // <else if statement>
            @Elseifstatementlist = 94,                 // <else if statement list>
            @Elsestatement = 95,                       // <else statement>
            @Emptyabletype = 96,                       // <emptyable type>
            @Equalityexp = 97,                         // <equality exp>
            @Exp = 98,                                 // <exp>
            @Explist = 99,                             // <exp list>
            @Forstepstatement = 100,                   // <for step statement>
            @Functionbody = 101,                       // <function body>
            @Functioncall = 102,                       // <function call>
            @Functionexp = 103,                        // <function exp>
            @Importdec = 104,                          // <import dec>
            @Importlist = 105,                         // <import list>
            @Jointexp = 106,                           // <joint exp>
            @Laststatement = 107,                      // <last statement>
            @Modifier = 108,                           // <modifier>
            @Modifierlist = 109,                       // <modifier list>
            @Multexp = 110,                            // <mult exp>
            @Objectexp = 111,                          // <object exp>
            @Orexp = 112,                              // <or exp>
            @Packageblock = 113,                       // <package block>
            @Packagedec = 114,                         // <package dec>
            @Packagename = 115,                        // <package name>
            @Packagenamelist = 116,                    // <package name list>
            @Parameter = 117,                          // <parameter>
            @Parameterlist = 118,                      // <parameter list>
            @Statement = 119,                          // <statement>
            @Statementlist = 120,                      // <statement list>
            @Type = 121,                               // <type>
            @Typeblock = 122,                          // <type block>
            @Typeconversionexp = 123,                  // <type conversion exp>
            @Typelist = 124,                           // <type list>
            @Unaryexp = 125,                           // <unary exp>
            @Valueexp = 126,                           // <value exp>
            @Vardec = 127,                             // <var dec>
            @Varexp = 128,                             // <var exp>
            @Varlvalue = 129,                          // <var lvalue>
            @Varlvalueexp = 130,                       // <var lvalue exp>
            @Varlvaluelist = 131                       // <var lvalue list>
        }

        private enum ProductionIndex
        {
            @Chunk = 0,                                // <chunk> ::= <package block> <type block>
            @Type_Boolean = 1,                         // <type> ::= boolean
            @Type_Number = 2,                          // <type> ::= number
            @Type_String = 3,                          // <type> ::= string
            @Type_Table = 4,                           // <type> ::= table
            @Type_Any = 5,                             // <type> ::= any
            @Type_Identifier = 6,                      // <type> ::= Identifier
            @Type_Function_Lt_Colon_Gt = 7,            // <type> ::= function '<' <emptyable type> ':' <emptyable type> '>'
            @Type_Listtable_Lt_Gt = 8,                 // <type> ::= ListTable '<' <type> '>'
            @Type_Hashtable_Lt_Comma_Gt = 9,           // <type> ::= HashTable '<' <type> ',' <type> '>'
            @Typelist = 10,                            // <type list> ::= <type>
            @Typelist_Comma = 11,                      // <type list> ::= <type list> ',' <type>
            @Vardec_Identifier = 12,                   // <var dec> ::= <type> Identifier
            @Varlvalue = 13,                           // <var lvalue> ::= <var exp>
            @Varlvalue2 = 14,                          // <var lvalue> ::= <var dec>
            @Varlvaluelist = 15,                       // <var lvalue list> ::= <var lvalue>
            @Varlvaluelist_Comma = 16,                 // <var lvalue list> ::= <var lvalue list> ',' <var lvalue>
            @Varlvalueexp_Eq = 17,                     // <var lvalue exp> ::= <var lvalue list> '=' <exp list>
            @Varlvalueexp = 18,                        // <var lvalue exp> ::= <var lvalue list>
            @Explist = 19,                             // <exp list> ::= <exp>
            @Explist_Comma = 20,                       // <exp list> ::= <exp> ',' <exp list>
            @Exp = 21,                                 // <exp> ::= <or exp>
            @Orexp_Or = 22,                            // <or exp> ::= <or exp> or <and exp>
            @Orexp = 23,                               // <or exp> ::= <and exp>
            @Andexp_And = 24,                          // <and exp> ::= <and exp> and <equality exp>
            @Andexp = 25,                              // <and exp> ::= <equality exp>
            @Equalityexp_Eqeq = 26,                    // <equality exp> ::= <equality exp> '==' <compare exp>
            @Equalityexp_Tildeeq = 27,                 // <equality exp> ::= <equality exp> '~=' <compare exp>
            @Equalityexp = 28,                         // <equality exp> ::= <compare exp>
            @Compareexp_Lt = 29,                       // <compare exp> ::= <compare exp> '<' <type conversion exp>
            @Compareexp_Gt = 30,                       // <compare exp> ::= <compare exp> '>' <type conversion exp>
            @Compareexp_Lteq = 31,                     // <compare exp> ::= <compare exp> '<=' <type conversion exp>
            @Compareexp_Gteq = 32,                     // <compare exp> ::= <compare exp> '>=' <type conversion exp>
            @Compareexp = 33,                          // <compare exp> ::= <type conversion exp>
            @Typeconversionexp_As = 34,                // <type conversion exp> ::= <type conversion exp> as <type>
            @Typeconversionexp = 35,                   // <type conversion exp> ::= <add exp>
            @Addexp_Plus = 36,                         // <add exp> ::= <add exp> '+' <mult exp>
            @Addexp_Minus = 37,                        // <add exp> ::= <add exp> '-' <mult exp>
            @Addexp = 38,                              // <add exp> ::= <mult exp>
            @Multexp_Times = 39,                       // <mult exp> ::= <mult exp> '*' <joint exp>
            @Multexp_Div = 40,                         // <mult exp> ::= <mult exp> '/' <joint exp>
            @Multexp_Percent = 41,                     // <mult exp> ::= <mult exp> '%' <joint exp>
            @Multexp = 42,                             // <mult exp> ::= <joint exp>
            @Jointexp_Dotdot = 43,                     // <joint exp> ::= <joint exp> '..' <unary exp>
            @Jointexp = 44,                            // <joint exp> ::= <unary exp>
            @Unaryexp_Not = 45,                        // <unary exp> ::= not <unary exp>
            @Unaryexp_Num = 46,                        // <unary exp> ::= '#' <unary exp>
            @Unaryexp = 47,                            // <unary exp> ::= <function exp>
            @Functionexp = 48,                         // <function exp> ::= <function body>
            @Functionexp2 = 49,                        // <function exp> ::= <value exp>
            @Valueexp_Nil = 50,                        // <value exp> ::= nil
            @Valueexp_Luatable = 51,                   // <value exp> ::= LuaTable
            @Valueexp_Numbervalue = 52,                // <value exp> ::= NumberValue
            @Valueexp_Booleanvalue = 53,               // <value exp> ::= BooleanValue
            @Valueexp_Stringvalue = 54,                // <value exp> ::= StringValue
            @Valueexp = 55,                            // <value exp> ::= <object exp>
            @Objectexp_This = 56,                      // <object exp> ::= this
            @Objectexp_Super = 57,                     // <object exp> ::= super
            @Objectexp_New_Identifier_Lparen_Rparen = 58,  // <object exp> ::= new Identifier '(' <argument list> ')'
            @Objectexp = 59,                           // <object exp> ::= <function call>
            @Objectexp_Lparen_Rparen = 60,             // <object exp> ::= '(' <exp> ')'
            @Objectexp2 = 61,                          // <object exp> ::= <var exp>
            @Objectexp_String = 62,                    // <object exp> ::= string
            @Objectexp_Table = 63,                     // <object exp> ::= table
            @Objectexp_Any = 64,                       // <object exp> ::= any
            @Varexp_Lbracket_Rbracket = 65,            // <var exp> ::= <object exp> '[' <exp> ']'
            @Varexp_Member = 66,                       // <var exp> ::= <object exp> Member
            @Varexp_Identifier = 67,                   // <var exp> ::= Identifier
            @Packageblock = 68,                        // <package block> ::= <package dec> <import list>
            @Packagedec_Package_Semi = 69,             // <package dec> ::= package <package name> ';'
            @Importlist = 70,                          // <import list> ::= <import list> <import dec>
            @Importlist2 = 71,                         // <import list> ::= 
            @Importdec_Import_Identifier_Eq_Semi = 72,  // <import dec> ::= import Identifier '=' <package name> ';'
            @Importdec_Import_Semi = 73,               // <import dec> ::= import <package name> ';'
            @Packagename_Identifier = 74,              // <package name> ::= Identifier <package name list>
            @Packagenamelist_Member = 75,              // <package name list> ::= <package name list> Member
            @Packagenamelist = 76,                     // <package name list> ::= 
            @Modifierlist = 77,                        // <modifier list> ::= <modifier> <modifier list>
            @Modifierlist2 = 78,                       // <modifier list> ::= 
            @Modifier_Static = 79,                     // <modifier> ::= static
            @Modifier_Extern = 80,                     // <modifier> ::= extern
            @Modifier_Global = 81,                     // <modifier> ::= global
            @Modifier_Public = 82,                     // <modifier> ::= public
            @Modifier_Private = 83,                    // <modifier> ::= private
            @Modifier_Protected = 84,                  // <modifier> ::= protected
            @Typeblock = 85,                           // <type block> ::= <class block>
            @Classblock_Class_Identifier = 86,         // <class block> ::= <modifier list> class Identifier <class base opt> <class member list>
            @Classbaseopt_Extends_Identifier = 87,     // <class base opt> ::= extends Identifier
            @Classbaseopt = 88,                        // <class base opt> ::= 
            @Classmemberlist = 89,                     // <class member list> ::= <class member list> <class member>
            @Classmemberlist2 = 90,                    // <class member list> ::= 
            @Classmember = 91,                         // <class member> ::= <class function>
            @Classmember2 = 92,                        // <class member> ::= <class extern function>
            @Classmember3 = 93,                        // <class member> ::= <class field>
            @Classmember4 = 94,                        // <class member> ::= <class ctor>
            @Classctor_Identifier = 95,                // <class ctor> ::= <modifier list> Identifier <function body>
            @Classfunction_Identifier = 96,            // <class function> ::= <modifier list> <emptyable type> Identifier <function body>
            @Classexternfunction_Identifier_Lparen_Rparen_Semi = 97,  // <class extern function> ::= <modifier list> <emptyable type> Identifier '(' <parameter list> ')' ';'
            @Classfield_Identifier_Semi = 98,          // <class field> ::= <modifier list> <emptyable type> Identifier <class field assignment> ';'
            @Classfieldassignment_Eq = 99,             // <class field assignment> ::= '=' <exp>
            @Classfieldassignment = 100,               // <class field assignment> ::= 
            @Parameter_Identifier = 101,               // <parameter> ::= <type> Identifier
            @Parameter_Dotdotdot_Identifier = 102,     // <parameter> ::= <type> '...' Identifier
            @Parameterlist = 103,                      // <parameter list> ::= <parameter>
            @Parameterlist_Comma = 104,                // <parameter list> ::= <parameter list> ',' <parameter>
            @Parameterlist2 = 105,                     // <parameter list> ::= 
            @Argumentlist = 106,                       // <argument list> ::= <exp list>
            @Argumentlist2 = 107,                      // <argument list> ::= 
            @Emptyabletype_Void = 108,                 // <emptyable type> ::= void
            @Emptyabletype = 109,                      // <emptyable type> ::= <type list>
            @Functionbody_Lparen_Rparen_End = 110,     // <function body> ::= '(' <parameter list> ')' <block> end
            @Functioncall_Lparen_Rparen = 111,         // <function call> ::= <object exp> '(' <argument list> ')'
            @Block = 112,                              // <block> ::= <statement list> <last statement>
            @Statementlist = 113,                      // <statement list> ::= <statement list> <statement>
            @Statementlist2 = 114,                     // <statement list> ::= 
            @Laststatement_Return_Semi = 115,          // <last statement> ::= return <exp list> ';'
            @Laststatement_Return_Semi2 = 116,         // <last statement> ::= return ';'
            @Laststatement_Break_Semi = 117,           // <last statement> ::= break ';'
            @Laststatement = 118,                      // <last statement> ::= 
            @Statement_Semi = 119,                     // <statement> ::= <function call> ';'
            @Statement_Semi2 = 120,                    // <statement> ::= <var lvalue exp> ';'
            @Statement_If_Then_End = 121,              // <statement> ::= if <exp> then <block> <else if statement list> <else statement> end
            @Statement_While_Do_End = 122,             // <statement> ::= while <exp> do <block> end
            @Statement_Repeat_Until_Lparen_Rparen = 123,  // <statement> ::= repeat <block> until '(' <exp> ')'
            @Statement_For_Identifier_Eq_Comma_Do_End = 124,  // <statement> ::= for Identifier '=' <exp> ',' <exp> <for step statement> do <block> end
            @Statement_For_Identifier_Comma_Identifier_In_Do_End = 125,  // <statement> ::= for Identifier ',' Identifier in <exp> do <block> end
            @Statement_Do_End = 126,                   // <statement> ::= do <block> end
            @Elseifstatement_Elseif_Then = 127,        // <else if statement> ::= elseif <exp> then <block>
            @Elseifstatementlist = 128,                // <else if statement list> ::= <else if statement list> <else if statement>
            @Elseifstatementlist2 = 129,               // <else if statement list> ::= 
            @Elsestatement_Else = 130,                 // <else statement> ::= else <block>
            @Elsestatement = 131,                      // <else statement> ::= 
            @Forstepstatement_Comma = 132,             // <for step statement> ::= ',' <exp>
            @Forstepstatement = 133                    // <for step statement> ::= 
        }

        public object program;     //You might derive a specific object

        public void Setup()
        {
            //This procedure can be called to load the parse tables. The class can
            //read tables using a BinaryReader.
        
            this.parser.LoadTables(Path.Combine(Directory.GetCurrentDirectory(), "Config/grammar.egt"));
        }
    
        public bool Parse(TextReader reader, Project project = null, Class @class = null)
        {
            //This procedure starts the GOLD Parser Engine and handles each of the
            //messages it returns. Each time a reduction is made, you can create new
            //custom object and reassign the .CurrentReduction property. Otherwise, 
            //the system will use the Reduction object that was returned.
            //
            //The resulting tree will be a pure representation of the language 
            //and will be ready to implement.

            GOLD.ParseMessage response; 
            bool done;                      //Controls when we leave the loop
            bool accepted = false;          //Was the parse successful?

            this.parser.Open(reader);
            this.parser.TrimReductions = false;  //Please read about this feature before enabling  

            done = false;
            while (!done)
            {
                response = this.parser.Parse();
            
                switch (response)
                {
                    case GOLD.ParseMessage.LexicalError:
                        //Cannot recognize token
                        var currentPosition = this.parser.CurrentPosition();
                        throw new SyntaxException("Lexical error.", currentPosition.Line + 1, currentPosition.Column + 1);
                        done = true;
                        break;

                    case GOLD.ParseMessage.SyntaxError:
                        //Expecting a different token
                        currentPosition = this.parser.CurrentPosition();
                        throw new SyntaxException("Syntax error.", currentPosition.Line + 1, currentPosition.Column + 1);
                        done = true;
                        break;

                    case GOLD.ParseMessage.Reduction:
                        //Create a customized object to store the reduction

                        this.parser.CurrentReduction = this.CreateNewObject(this.parser.CurrentReduction as GOLD.Reduction,project,@class);
                        break;

                    case GOLD.ParseMessage.Accept:
                        //Accepted!
                        //program = parser.CurrentReduction   //The root node!                 
                        done = true;
                        accepted = true;
                        break;

                    case GOLD.ParseMessage.TokenRead:
                        //You don't have to do anything here.
                        break;

                    case GOLD.ParseMessage.InternalError:
                        //INTERNAL ERROR! Something is horribly wrong.
                        done = true;
                        break;

                    case GOLD.ParseMessage.NotLoadedError:
                        //This error occurs if the CGT was not loaded.                   
                        done = true;
                        break;

                    case GOLD.ParseMessage.GroupError: 
                        //GROUP ERROR! Unexpected end of file
                        done = true;
                        break;
                } 
            } //while

            return accepted;
        }
    
        private object CreateNewObject(GOLD.Reduction r, Project project = null, Class @class = null)
        { 
            object result = null;
        
            switch( (ProductionIndex) r.Parent.TableIndex())
            {
                case ProductionIndex.Chunk:                 
                    // <chunk> ::= <package block> <type block>
                    result = new Chunk_Packageblock_Typeblock(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Type_Boolean:                 
                    // <type> ::= boolean
                    result = new Type_Boolean(project,@class,r[0]);
                    break;

                case ProductionIndex.Type_Number:                 
                    // <type> ::= number
                    result = new Type_Number(project,@class,r[0]);
                    break;

                case ProductionIndex.Type_String:                 
                    // <type> ::= string
                    result = new Type_String(project,@class,r[0]);
                    break;

                case ProductionIndex.Type_Table:                 
                    // <type> ::= table
                    result = new Type_Table(project,@class,r[0]);
                    break;

                case ProductionIndex.Type_Any:                 
                    // <type> ::= any
                    result = new Type_Any(project,@class,r[0]);
                    break;

                case ProductionIndex.Type_Identifier:                 
                    // <type> ::= Identifier
                    result = new Type_Identifier(project,@class,r[0]);
                    break;

                case ProductionIndex.Type_Function_Lt_Colon_Gt:                 
                    // <type> ::= function '<' <emptyable type> ':' <emptyable type> '>'
                    result = new Type_Function_Lt_Emptyabletype_Colon_Emptyabletype_Gt(project,@class,r[0],r[1],r[2],r[3],r[4],r[5]);
                    break;

                case ProductionIndex.Type_Listtable_Lt_Gt:                 
                    // <type> ::= ListTable '<' <type> '>'
                    result = new Type_Listtable_Lt_Type_Gt(project,@class,r[0],r[1],r[2],r[3]);
                    break;

                case ProductionIndex.Type_Hashtable_Lt_Comma_Gt:                 
                    // <type> ::= HashTable '<' <type> ',' <type> '>'
                    result = new Type_Hashtable_Lt_Type_Comma_Type_Gt(project,@class,r[0],r[1],r[2],r[3],r[4],r[5]);
                    break;

                case ProductionIndex.Typelist:                 
                    // <type list> ::= <type>
                    result = new Typelist_Type(project,@class,r[0]);
                    break;

                case ProductionIndex.Typelist_Comma:                 
                    // <type list> ::= <type list> ',' <type>
                    result = new Typelist_Typelist_Comma_Type(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Vardec_Identifier:                 
                    // <var dec> ::= <type> Identifier
                    result = new Vardec_Type_Identifier(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Varlvalue:                 
                    // <var lvalue> ::= <var exp>
                    result = new Varlvalue_Varexp(project,@class,r[0]);
                    break;

                case ProductionIndex.Varlvalue2:                 
                    // <var lvalue> ::= <var dec>
                    result = new Varlvalue_Vardec(project,@class,r[0]);
                    break;

                case ProductionIndex.Varlvaluelist:                 
                    // <var lvalue list> ::= <var lvalue>
                    result = new Varlvaluelist_Varlvalue(project,@class,r[0]);
                    break;

                case ProductionIndex.Varlvaluelist_Comma:                 
                    // <var lvalue list> ::= <var lvalue list> ',' <var lvalue>
                    result = new Varlvaluelist_Varlvaluelist_Comma_Varlvalue(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Varlvalueexp_Eq:                 
                    // <var lvalue exp> ::= <var lvalue list> '=' <exp list>
                    result = new Varlvalueexp_Varlvaluelist_Eq_Explist(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Varlvalueexp:                 
                    // <var lvalue exp> ::= <var lvalue list>
                    result = new Varlvalueexp_Varlvaluelist(project,@class,r[0]);
                    break;

                case ProductionIndex.Explist:                 
                    // <exp list> ::= <exp>
                    result = new Explist_Exp(project,@class,r[0]);
                    break;

                case ProductionIndex.Explist_Comma:                 
                    // <exp list> ::= <exp> ',' <exp list>
                    result = new Explist_Exp_Comma_Explist(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Exp:                 
                    // <exp> ::= <or exp>
                    result = new Exp_Orexp(project,@class,r[0]);
                    break;

                case ProductionIndex.Orexp_Or:                 
                    // <or exp> ::= <or exp> or <and exp>
                    result = new Orexp_Orexp_Or_Andexp(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Orexp:                 
                    // <or exp> ::= <and exp>
                    result = new Orexp_Andexp(project,@class,r[0]);
                    break;

                case ProductionIndex.Andexp_And:                 
                    // <and exp> ::= <and exp> and <equality exp>
                    result = new Andexp_Andexp_And_Equalityexp(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Andexp:                 
                    // <and exp> ::= <equality exp>
                    result = new Andexp_Equalityexp(project,@class,r[0]);
                    break;

                case ProductionIndex.Equalityexp_Eqeq:                 
                    // <equality exp> ::= <equality exp> '==' <compare exp>
                    result = new Equalityexp_Equalityexp_Eqeq_Compareexp(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Equalityexp_Tildeeq:                 
                    // <equality exp> ::= <equality exp> '~=' <compare exp>
                    result = new Equalityexp_Equalityexp_Tildeeq_Compareexp(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Equalityexp:                 
                    // <equality exp> ::= <compare exp>
                    result = new Equalityexp_Compareexp(project,@class,r[0]);
                    break;

                case ProductionIndex.Compareexp_Lt:                 
                    // <compare exp> ::= <compare exp> '<' <type conversion exp>
                    result = new Compareexp_Compareexp_Lt_Typeconversionexp(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Compareexp_Gt:                 
                    // <compare exp> ::= <compare exp> '>' <type conversion exp>
                    result = new Compareexp_Compareexp_Gt_Typeconversionexp(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Compareexp_Lteq:                 
                    // <compare exp> ::= <compare exp> '<=' <type conversion exp>
                    result = new Compareexp_Compareexp_Lteq_Typeconversionexp(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Compareexp_Gteq:                 
                    // <compare exp> ::= <compare exp> '>=' <type conversion exp>
                    result = new Compareexp_Compareexp_Gteq_Typeconversionexp(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Compareexp:                 
                    // <compare exp> ::= <type conversion exp>
                    result = new Compareexp_Typeconversionexp(project,@class,r[0]);
                    break;

                case ProductionIndex.Typeconversionexp_As:                 
                    // <type conversion exp> ::= <type conversion exp> as <type>
                    result = new Typeconversionexp_Typeconversionexp_As_Type(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Typeconversionexp:                 
                    // <type conversion exp> ::= <add exp>
                    result = new Typeconversionexp_Addexp(project,@class,r[0]);
                    break;

                case ProductionIndex.Addexp_Plus:                 
                    // <add exp> ::= <add exp> '+' <mult exp>
                    result = new Addexp_Addexp_Plus_Multexp(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Addexp_Minus:                 
                    // <add exp> ::= <add exp> '-' <mult exp>
                    result = new Addexp_Addexp_Minus_Multexp(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Addexp:                 
                    // <add exp> ::= <mult exp>
                    result = new Addexp_Multexp(project,@class,r[0]);
                    break;

                case ProductionIndex.Multexp_Times:                 
                    // <mult exp> ::= <mult exp> '*' <joint exp>
                    result = new Multexp_Multexp_Times_Jointexp(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Multexp_Div:                 
                    // <mult exp> ::= <mult exp> '/' <joint exp>
                    result = new Multexp_Multexp_Div_Jointexp(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Multexp_Percent:                 
                    // <mult exp> ::= <mult exp> '%' <joint exp>
                    result = new Multexp_Multexp_Percent_Jointexp(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Multexp:                 
                    // <mult exp> ::= <joint exp>
                    result = new Multexp_Jointexp(project,@class,r[0]);
                    break;

                case ProductionIndex.Jointexp_Dotdot:                 
                    // <joint exp> ::= <joint exp> '..' <unary exp>
                    result = new Jointexp_Jointexp_Dotdot_Unaryexp(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Jointexp:                 
                    // <joint exp> ::= <unary exp>
                    result = new Jointexp_Unaryexp(project,@class,r[0]);
                    break;

                case ProductionIndex.Unaryexp_Not:                 
                    // <unary exp> ::= not <unary exp>
                    result = new Unaryexp_Not_Unaryexp(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Unaryexp_Num:                 
                    // <unary exp> ::= '#' <unary exp>
                    result = new Unaryexp_Num_Unaryexp(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Unaryexp:                 
                    // <unary exp> ::= <function exp>
                    result = new Unaryexp_Functionexp(project,@class,r[0]);
                    break;

                case ProductionIndex.Functionexp:                 
                    // <function exp> ::= <function body>
                    result = new Functionexp_Functionbody(project,@class,r[0]);
                    break;

                case ProductionIndex.Functionexp2:                 
                    // <function exp> ::= <value exp>
                    result = new Functionexp_Valueexp(project,@class,r[0]);
                    break;

                case ProductionIndex.Valueexp_Nil:                 
                    // <value exp> ::= nil
                    result = new Valueexp_Nil(project,@class,r[0]);
                    break;

                case ProductionIndex.Valueexp_Luatable:                 
                    // <value exp> ::= LuaTable
                    result = new Valueexp_Luatable(project,@class,r[0]);
                    break;

                case ProductionIndex.Valueexp_Numbervalue:                 
                    // <value exp> ::= NumberValue
                    result = new Valueexp_Numbervalue(project,@class,r[0]);
                    break;

                case ProductionIndex.Valueexp_Booleanvalue:                 
                    // <value exp> ::= BooleanValue
                    result = new Valueexp_Booleanvalue(project,@class,r[0]);
                    break;

                case ProductionIndex.Valueexp_Stringvalue:                 
                    // <value exp> ::= StringValue
                    result = new Valueexp_Stringvalue(project,@class,r[0]);
                    break;

                case ProductionIndex.Valueexp:                 
                    // <value exp> ::= <object exp>
                    result = new Valueexp_Objectexp(project,@class,r[0]);
                    break;

                case ProductionIndex.Objectexp_This:                 
                    // <object exp> ::= this
                    result = new Objectexp_This(project,@class,r[0]);
                    break;

                case ProductionIndex.Objectexp_Super:                 
                    // <object exp> ::= super
                    result = new Objectexp_Super(project,@class,r[0]);
                    break;

                case ProductionIndex.Objectexp_New_Identifier_Lparen_Rparen:                 
                    // <object exp> ::= new Identifier '(' <argument list> ')'
                    result = new Objectexp_New_Identifier_Lparen_Argumentlist_Rparen(project,@class,r[0],r[1],r[2],r[3],r[4]);
                    break;

                case ProductionIndex.Objectexp:                 
                    // <object exp> ::= <function call>
                    result = new Objectexp_Functioncall(project,@class,r[0]);
                    break;

                case ProductionIndex.Objectexp_Lparen_Rparen:                 
                    // <object exp> ::= '(' <exp> ')'
                    result = new Objectexp_Lparen_Exp_Rparen(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Objectexp2:                 
                    // <object exp> ::= <var exp>
                    result = new Objectexp_Varexp(project,@class,r[0]);
                    break;

                case ProductionIndex.Objectexp_String:                 
                    // <object exp> ::= string
                    result = new Objectexp_String(project,@class,r[0]);
                    break;

                case ProductionIndex.Objectexp_Table:                 
                    // <object exp> ::= table
                    result = new Objectexp_Table(project,@class,r[0]);
                    break;

                case ProductionIndex.Objectexp_Any:                 
                    // <object exp> ::= any
                    result = new Objectexp_Any(project,@class,r[0]);
                    break;

                case ProductionIndex.Varexp_Lbracket_Rbracket:                 
                    // <var exp> ::= <object exp> '[' <exp> ']'
                    result = new Varexp_Objectexp_Lbracket_Exp_Rbracket(project,@class,r[0],r[1],r[2],r[3]);
                    break;

                case ProductionIndex.Varexp_Member:                 
                    // <var exp> ::= <object exp> Member
                    result = new Varexp_Objectexp_Member(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Varexp_Identifier:                 
                    // <var exp> ::= Identifier
                    result = new Varexp_Identifier(project,@class,r[0]);
                    break;

                case ProductionIndex.Packageblock:                 
                    // <package block> ::= <package dec> <import list>
                    result = new Packageblock_Packagedec_Importlist(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Packagedec_Package_Semi:                 
                    // <package dec> ::= package <package name> ';'
                    result = new Packagedec_Package_Packagename_Semi(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Importlist:                 
                    // <import list> ::= <import list> <import dec>
                    result = new Importlist_Importlist_Importdec(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Importlist2:                 
                    // <import list> ::= 
                    result = new Importlist_(project,@class);
                    break;

                case ProductionIndex.Importdec_Import_Identifier_Eq_Semi:                 
                    // <import dec> ::= import Identifier '=' <package name> ';'
                    result = new Importdec_Import_Identifier_Eq_Packagename_Semi(project,@class,r[0],r[1],r[2],r[3],r[4]);
                    break;

                case ProductionIndex.Importdec_Import_Semi:                 
                    // <import dec> ::= import <package name> ';'
                    result = new Importdec_Import_Packagename_Semi(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Packagename_Identifier:                 
                    // <package name> ::= Identifier <package name list>
                    result = new Packagename_Identifier_Packagenamelist(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Packagenamelist_Member:                 
                    // <package name list> ::= <package name list> Member
                    result = new Packagenamelist_Packagenamelist_Member(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Packagenamelist:                 
                    // <package name list> ::= 
                    result = new Packagenamelist_(project,@class);
                    break;

                case ProductionIndex.Modifierlist:                 
                    // <modifier list> ::= <modifier> <modifier list>
                    result = new Modifierlist_Modifier_Modifierlist(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Modifierlist2:                 
                    // <modifier list> ::= 
                    result = new Modifierlist_(project,@class);
                    break;

                case ProductionIndex.Modifier_Static:                 
                    // <modifier> ::= static
                    result = new Modifier_Static(project,@class,r[0]);
                    break;

                case ProductionIndex.Modifier_Extern:                 
                    // <modifier> ::= extern
                    result = new Modifier_Extern(project,@class,r[0]);
                    break;

                case ProductionIndex.Modifier_Global:                 
                    // <modifier> ::= global
                    result = new Modifier_Global(project,@class,r[0]);
                    break;

                case ProductionIndex.Modifier_Public:                 
                    // <modifier> ::= public
                    result = new Modifier_Public(project,@class,r[0]);
                    break;

                case ProductionIndex.Modifier_Private:                 
                    // <modifier> ::= private
                    result = new Modifier_Private(project,@class,r[0]);
                    break;

                case ProductionIndex.Modifier_Protected:                 
                    // <modifier> ::= protected
                    result = new Modifier_Protected(project,@class,r[0]);
                    break;

                case ProductionIndex.Typeblock:                 
                    // <type block> ::= <class block>
                    result = new Typeblock_Classblock(project,@class,r[0]);
                    break;

                case ProductionIndex.Classblock_Class_Identifier:                 
                    // <class block> ::= <modifier list> class Identifier <class base opt> <class member list>
                    result = new Classblock_Modifierlist_Class_Identifier_Classbaseopt_Classmemberlist(project,@class,r[0],r[1],r[2],r[3],r[4]);
                    break;

                case ProductionIndex.Classbaseopt_Extends_Identifier:                 
                    // <class base opt> ::= extends Identifier
                    result = new Classbaseopt_Extends_Identifier(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Classbaseopt:                 
                    // <class base opt> ::= 
                    result = new Classbaseopt_(project,@class);
                    break;

                case ProductionIndex.Classmemberlist:                 
                    // <class member list> ::= <class member list> <class member>
                    result = new Classmemberlist_Classmemberlist_Classmember(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Classmemberlist2:                 
                    // <class member list> ::= 
                    result = new Classmemberlist_(project,@class);
                    break;

                case ProductionIndex.Classmember:                 
                    // <class member> ::= <class function>
                    result = new Classmember_Classfunction(project,@class,r[0]);
                    break;

                case ProductionIndex.Classmember2:                 
                    // <class member> ::= <class extern function>
                    result = new Classmember_Classexternfunction(project,@class,r[0]);
                    break;

                case ProductionIndex.Classmember3:                 
                    // <class member> ::= <class field>
                    result = new Classmember_Classfield(project,@class,r[0]);
                    break;

                case ProductionIndex.Classmember4:                 
                    // <class member> ::= <class ctor>
                    result = new Classmember_Classctor(project,@class,r[0]);
                    break;

                case ProductionIndex.Classctor_Identifier:                 
                    // <class ctor> ::= <modifier list> Identifier <function body>
                    result = new Classctor_Modifierlist_Identifier_Functionbody(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Classfunction_Identifier:                 
                    // <class function> ::= <modifier list> <emptyable type> Identifier <function body>
                    result = new Classfunction_Modifierlist_Emptyabletype_Identifier_Functionbody(project,@class,r[0],r[1],r[2],r[3]);
                    break;

                case ProductionIndex.Classexternfunction_Identifier_Lparen_Rparen_Semi:                 
                    // <class extern function> ::= <modifier list> <emptyable type> Identifier '(' <parameter list> ')' ';'
                    result = new Classexternfunction_Modifierlist_Emptyabletype_Identifier_Lparen_Parameterlist_Rparen_Semi(project,@class,r[0],r[1],r[2],r[3],r[4],r[5],r[6]);
                    break;

                case ProductionIndex.Classfield_Identifier_Semi:                 
                    // <class field> ::= <modifier list> <emptyable type> Identifier <class field assignment> ';'
                    result = new Classfield_Modifierlist_Emptyabletype_Identifier_Classfieldassignment_Semi(project,@class,r[0],r[1],r[2],r[3],r[4]);
                    break;

                case ProductionIndex.Classfieldassignment_Eq:                 
                    // <class field assignment> ::= '=' <exp>
                    result = new Classfieldassignment_Eq_Exp(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Classfieldassignment:                 
                    // <class field assignment> ::= 
                    result = new Classfieldassignment_(project,@class);
                    break;

                case ProductionIndex.Parameter_Identifier:                 
                    // <parameter> ::= <type> Identifier
                    result = new Parameter_Type_Identifier(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Parameter_Dotdotdot_Identifier:                 
                    // <parameter> ::= <type> '...' Identifier
                    result = new Parameter_Type_Dotdotdot_Identifier(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Parameterlist:                 
                    // <parameter list> ::= <parameter>
                    result = new Parameterlist_Parameter(project,@class,r[0]);
                    break;

                case ProductionIndex.Parameterlist_Comma:                 
                    // <parameter list> ::= <parameter list> ',' <parameter>
                    result = new Parameterlist_Parameterlist_Comma_Parameter(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Parameterlist2:                 
                    // <parameter list> ::= 
                    result = new Parameterlist_(project,@class);
                    break;

                case ProductionIndex.Argumentlist:                 
                    // <argument list> ::= <exp list>
                    result = new Argumentlist_Explist(project,@class,r[0]);
                    break;

                case ProductionIndex.Argumentlist2:                 
                    // <argument list> ::= 
                    result = new Argumentlist_(project,@class);
                    break;

                case ProductionIndex.Emptyabletype_Void:                 
                    // <emptyable type> ::= void
                    result = new Emptyabletype_Void(project,@class,r[0]);
                    break;

                case ProductionIndex.Emptyabletype:                 
                    // <emptyable type> ::= <type list>
                    result = new Emptyabletype_Typelist(project,@class,r[0]);
                    break;

                case ProductionIndex.Functionbody_Lparen_Rparen_End:                 
                    // <function body> ::= '(' <parameter list> ')' <block> end
                    result = new Functionbody_Lparen_Parameterlist_Rparen_Block_End(project,@class,r[0],r[1],r[2],r[3],r[4]);
                    break;

                case ProductionIndex.Functioncall_Lparen_Rparen:                 
                    // <function call> ::= <object exp> '(' <argument list> ')'
                    result = new Functioncall_Objectexp_Lparen_Argumentlist_Rparen(project,@class,r[0],r[1],r[2],r[3]);
                    break;

                case ProductionIndex.Block:                 
                    // <block> ::= <statement list> <last statement>
                    result = new Block_Statementlist_Laststatement(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Statementlist:                 
                    // <statement list> ::= <statement list> <statement>
                    result = new Statementlist_Statementlist_Statement(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Statementlist2:                 
                    // <statement list> ::= 
                    result = new Statementlist_(project,@class);
                    break;

                case ProductionIndex.Laststatement_Return_Semi:
                    // <last statement> ::= return <exp list> ';'
                    result = new Laststatement_Return_Explist_Semi(project, @class, r[0], r[1], r[2]);
                    break;

                case ProductionIndex.Laststatement_Return_Semi2:
                    // <last statement> ::= return ';'
                    result = new Laststatement_Return_Semi(project, @class, r[0], r[1]);
                    break;

                case ProductionIndex.Laststatement_Break_Semi:                 
                    // <last statement> ::= break ';'
                    result = new Laststatement_Break_Semi(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Laststatement:                 
                    // <last statement> ::= 
                    result = new Laststatement_(project,@class);
                    break;

                case ProductionIndex.Statement_Semi:                 
                    // <statement> ::= <function call> ';'
                    result = new Statement_Functioncall_Semi(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Statement_Semi2:                 
                    // <statement> ::= <var lvalue exp> ';'
                    result = new Statement_Varlvalueexp_Semi(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Statement_If_Then_End:                 
                    // <statement> ::= if <exp> then <block> <else if statement list> <else statement> end
                    result = new Statement_If_Exp_Then_Block_Elseifstatementlist_Elsestatement_End(project,@class,r[0],r[1],r[2],r[3],r[4],r[5],r[6]);
                    break;

                case ProductionIndex.Statement_While_Do_End:                 
                    // <statement> ::= while <exp> do <block> end
                    result = new Statement_While_Exp_Do_Block_End(project,@class,r[0],r[1],r[2],r[3],r[4]);
                    break;

                case ProductionIndex.Statement_Repeat_Until_Lparen_Rparen:                 
                    // <statement> ::= repeat <block> until '(' <exp> ')'
                    result = new Statement_Repeat_Block_Until_Lparen_Exp_Rparen(project,@class,r[0],r[1],r[2],r[3],r[4],r[5]);
                    break;

                case ProductionIndex.Statement_For_Identifier_Eq_Comma_Do_End:                 
                    // <statement> ::= for Identifier '=' <exp> ',' <exp> <for step statement> do <block> end
                    result = new Statement_For_Identifier_Eq_Exp_Comma_Exp_Forstepstatement_Do_Block_End(project,@class,r[0],r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9]);
                    break;

                case ProductionIndex.Statement_For_Identifier_Comma_Identifier_In_Do_End:                 
                    // <statement> ::= for Identifier ',' Identifier in <exp> do <block> end
                    result = new Statement_For_Identifier_Comma_Identifier_In_Exp_Do_Block_End(project,@class,r[0],r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8]);
                    break;

                case ProductionIndex.Statement_Do_End:                 
                    // <statement> ::= do <block> end
                    result = new Statement_Do_Block_End(project,@class,r[0],r[1],r[2]);
                    break;

                case ProductionIndex.Elseifstatement_Elseif_Then:                 
                    // <else if statement> ::= elseif <exp> then <block>
                    result = new Elseifstatement_Elseif_Exp_Then_Block(project,@class,r[0],r[1],r[2],r[3]);
                    break;

                case ProductionIndex.Elseifstatementlist:                 
                    // <else if statement list> ::= <else if statement list> <else if statement>
                    result = new Elseifstatementlist_Elseifstatementlist_Elseifstatement(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Elseifstatementlist2:                 
                    // <else if statement list> ::= 
                    result = new Elseifstatementlist_(project,@class);
                    break;

                case ProductionIndex.Elsestatement_Else:                 
                    // <else statement> ::= else <block>
                    result = new Elsestatement_Else_Block(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Elsestatement:                 
                    // <else statement> ::= 
                    result = new Elsestatement_(project,@class);
                    break;

                case ProductionIndex.Forstepstatement_Comma:                 
                    // <for step statement> ::= ',' <exp>
                    result = new Forstepstatement_Comma_Exp(project,@class,r[0],r[1]);
                    break;

                case ProductionIndex.Forstepstatement:                 
                    // <for step statement> ::= 
                    result = new Forstepstatement_(project,@class);
                    break;

            }  //switch

            return result;
        }
    
    };
} //MyParser
