package dpk1.dpk2.dpk3;

class testclass

void funcblock_logical()
	boolean b1 = false;
	boolean b2 = true;
	boolean b3 = b1 and b2;
	boolean b4 = b1 and b2 and b3;
	boolean b5 = b1 and b2 or b3;
	boolean b6 = b1 and (b2 or b3);
	boolean b7 = b2 or b3;
	boolean b8 = not (b2 or b3);

	if (((b1) and (b2 or b3 or b4) and b5) or b6) then
		print("yes");
	end
end

void funcblock_relational ()
	table t = {};
	number n1 = 10;
	number n2 = 15;

	boolean b1 = n1 >= n2;
	boolean b2 = n1 <= n2;
	boolean b3 = n1 == n2;
	boolean b4 = n1 ~= n2;
	boolean b5 = n1 > n2;
	boolean b6 = n1 < n2;
	boolean b7 = t ~= nil;

	if (((t ~= nil) and (b2 or n1 == n2 or b4) and n1 > any.func()) or t) then
		print("yes");
	end
end

void funcblock_conversion ()
	table t = {};
	classA a = t as classA;
	any c = t as any;
	Color color = ((t as any).color) as Color;
end

void funcblock_mathematical()
	number n1 = 0.66;
	number n2 = 66;
	table t = {};
	t.n = 144;

	number n3 = n1 + n2;
	number n4 = n1 - n2;
	number n5 = n1 * n2;
	number n6 = n1 / n2;
	number n7 = n1 % n2;

	number n8 = n1 + n2 * 2 / 15;
	number n9 = (n1 + n2) * 2;

	number n10 = ((n1 + n2) * t.n + any.func())/100;
end


void funcblock_string()
	string s = "sss";
	string s2 = "sss"..s;
	string s3 = "sss"..s2..s;
end

void funcblock_table()
	table t1 = {};
	table t2 = nil;
	print(#t1);
	print(#(t1.t));
	print(#(t1.t.t));
end

void funcblock_obj()
	table t = {};
	testclass tc = this;
	testclass tc2 = this.Lists[1];
	number n1 = this.func();
	number n2 = super.func();
	number n3 = new ClassA().num;
	number n4 = (new ClassA().num + 10)*2;
	number n5 = t.num*t.t2;
	number n6 = t.num*t.t2.t3["t4"];
	number n7 = t.num*t.t2.t3["t4"].func();
	number n8 = t.num*t.t2.t3["t4"].func().num;
end

